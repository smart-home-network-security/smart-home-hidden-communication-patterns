"""
Convert a MUD file generated by MUDgee in the JSON format,
to a JSON event signature tree.
"""

import os
import argparse
import json


# Paths
path_self = os.path.abspath(__file__)   # Path to this file
path_dir  = os.path.dirname(path_self)  # Directory of this file

# JSON tree template
tree_data = {
    "0_root": {
        "children": [],
        "data": [
            0,
            []
        ]
    }
}


### PROTOCOL PARSING FUNCTIONS ###

def parse_ip_src(ip_data: dict, ip_protocol: str) -> str:
    """
    Parse source IP host.

    Args:
        ip_data (dict): dictionary containing the IP protocol data
        ip_protocol (str): IP protocol name ("ipv4" or "ipv6")
    Returns:
        str: Source IP host
    """
    if "ietf-acldns:src-dnsname" in ip_data:
        return ip_data["ietf-acldns:src-dnsname"]
    elif f"source-{ip_protocol}-network" in ip_data:
        return ip_data[f"source-{ip_protocol}-network"]


def parse_ip_dst(ip_data: dict, ip_protocol: str) -> str:
    """
    Parse destination IP host.

    Args:
        ip_data (dict): dictionary containing the IP protocol data
        ip_protocol (str): IP protocol name ("ipv4" or "ipv6")
    Returns:
        str: Destination IP host
    """
    if "ietf-acldns:dst-dnsname" in ip_data:
        return ip_data["ietf-acldns:dst-dnsname"]
    elif f"destination-{ip_protocol}-network" in ip_data:
        return ip_data[f"destination-{ip_protocol}-network"]


def parse_ip(protocols: dict, ip_protocol: str) -> dict:
    """
    Parse IP protocol data (IPv4 or IPv6).

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
        ip_protocol (str): IP protocol name ("ipv4" or "ipv6")
    Returns:
        dict: Parsed IP data
    """
    ip_data = protocols[ip_protocol]
    res = {}

    # Parse source IP host
    ip_src = parse_ip_src(ip_data, ip_protocol)
    if ip_src is not None:
        res["src"] = ip_src
    
    # Parse destination IP host
    ip_dst = parse_ip_dst(ip_data, ip_protocol)
    if ip_dst is not None:
        res["dst"] = ip_dst

    # Parse MUD gateway field
    if "ietf-mud:mud" in protocols:
        res["dst"] = "192.168.1.1" if ip_protocol == "ipv4" else "fe80::1"
    
    return res


def parse_ipv4(protocols: dict) -> dict:
    """
    Parse IPv4 protocol data.

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
    Returns:
        dict: Parsed IPv4 data
    """
    return parse_ip(protocols, "ipv4")


def parse_ipv6(protocols: dict) -> dict:
    """
    Parse IPv6 protocol data.

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
    Returns:
        dict: Parsed IPv6 data
    """
    return parse_ip(protocols, "ipv6")


def parse_transport(protocols: dict, transport_protocol: str) -> dict:
    """
    Parse transport protocol data (TCP or UDP).

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
        transport_protocol (str): Transport protocol name ("tcp" or "udp")
    Returns:
        dict: Parsed transport data
    """
    transport_data = protocols[transport_protocol]
    res = {}

    # Parse source port
    if "source-port" in transport_data and transport_data["source-port"].get("operator", None) == "eq":
        res["src-port"] = transport_data["source-port"]["port"]

    # Parse destination port
    if "destination-port" in transport_data and transport_data["destination-port"].get("operator", None) == "eq":
        res["dst-port"] = transport_data["destination-port"]["port"]
    
    return res


def parse_tcp(protocols: dict) -> dict:
    """
    Parse TCP data.

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
    Returns:
        dict: Parsed TCP data
    """
    return parse_transport(protocols, "tcp")


def parse_udp(protocols: dict) -> dict:
    """
    Parse UDP data.

    Args:
        protocols (dict): Protocols data dictionary (contains data for all protocols)
    Returns:
        dict: Parsed UDP data
    """
    return parse_transport(protocols, "udp")


### MAIN FUNCTIONS ###

def convert(data_in: dict, tree_out: dict) -> None:
    """
    Convert input MUD data dictionary
    to output tree data dictionary.

    Args:
        data_in (dict): Input MUD data dictionary
        tree_out (dict): Output tree data dictionary
    """
    first_level_nodes = tree_out["0_root"]["children"]

    for acl in data_in["ietf-access-control-list:access-lists"]["acl"]:
        for ace in acl["aces"]["ace"]:

            # Init node
            node = {
                ace["name"]: {
                    "data": [
                        1,
                        []
                    ]
                }
            }

            # Process ACE and populate node
            for protocol_name in ace["matches"].keys():
                if protocol_name == "eth" or protocol_name == "ietf-mud:mud":
                    continue

                function_parsing = f"parse_{protocol_name}"
                if function_parsing in globals():

                    if node[ace["name"]]["data"][1]:
                        node[ace["name"]]["data"][1][0]["protocols"][protocol_name] = globals()[function_parsing](ace["matches"])
                    else:
                        node[ace["name"]]["data"][1] = [{
                            "protocols": {
                                protocol_name: globals()[function_parsing](ace["matches"])
                            },
                            "bidirectional": True
                        }]
                else:
                    print(f"Warning: No parsing function for protocol '{protocol_name}'")

            # Add node if not empty
            if node[ace["name"]]["data"][1]:
                first_level_nodes.append(node)
            


def main() -> None:

    ### PARSE COMMAND LINE ARGUMENTS ###
    
    parser = argparse.ArgumentParser(description="Convert a MUD file generated by MUDgee in the JSON format, to a JSON event signature tree.")
    parser.add_argument("infile", help="Input JSON MUD file")
    parser.add_argument("-o", "--outfile", default=None, help="Output JSON event signature tree file")
    args = parser.parse_args()

    # Process output file name
    if args.outfile is None:
        infile_basename = os.path.basename(args.infile)
        args.outfile = os.path.join(path_dir, infile_basename.replace(".json", ".tree.json"))

    
    ### PARSE INPUT FILE ###

    data_in = None
    with open(args.infile, "r") as f:
        data_in = json.load(f)
    

    ### CONVERT ###
    convert(data_in, tree_data)


    ### WRITE OUTPUT FILE ###
    with open(args.outfile, "w+") as f:
        json.dump(tree_data, f, indent=2)


if __name__ == "__main__":
    main()
